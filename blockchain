import hashlib
from time import time 

class Block:
    def __init__(self,index,timestamp,data,previous_hash,nonce):
        self.index=index
        self.timestamp=timestamp
        self.data=data
        self.previous_hash=previous_hash
        self.nonce=nonce
        self.hash=self.hashing()
         
    def hashing(self):
        key=hashlib.sha256()
        key.update(str(self.index).encode('utf-8'))
        key.update(str(self.timestamp).enconde('utf-8'))
        key.update(str(self.data).encode('utf-8'))
        key.update(str(self.previous_hash).encode('utf-8'))
        key.update(str(self.nonce).encode('utf-8'))
        return key.hexdigest()
    
class Blockchain:
    def __init__(self):
        self.chain=[]
        self.new_block(data="Genensis block",previous_hash='1',nonce=100)

    def new_block(self,data,previous_hash,nonce):#xác định chuỗi mới
        block=Block(len(self.chain)+1,time(),data,previous_hash,nonce)
        self.chain.append(block)
        return block
    
    def last_block(self):#xác định chuỗi trước đó
        return self.chain[-1]
    
    def vaild_nonce(last_nonce,nonce):# kiểm tra xem giá trị nonce có phù hợp hay không
        guess=f'{last_nonce}{nonce}'.encode()
        guess_hash=hashlib.sha256(guess).hexdigest()
        return guess_hash[0:4]=="0000"
    
    def proof_of_work(self,last_block): #tìm giá trị nonce
        last_nonce= last_block.nonce
        nonce=0
        while self.vaild_nonce(last_nonce,nonce) is False:
            nonce+=1
            return nonce
        
    def vaild_chain(self):#Kiểm tra xem chuỗi có hợp lệ hay không
        flag=True
        while flag:
            for i in range(1,len(self.chain)):
                if self.chain[i].index!= i+1:
                    flag=False
                    print("Chuỗi bị thay đổi trường index tại khối {i}")
                if self.chain[i-1].hash!=self.chain[i].previous_hash:
                    flag=False
                    print('Giá trị băm của khối truớc đã bị thay đổi tại khối {i}')
                if self.chain[i].hash!=self.chain[i].hashing():
                    flag= False
                    print("Giá trị băm đã bị thay đổi tại khối {i}")
                if self.proof_of_work(self.chain[i-1])!=self.chain[i].nonce:
                    flag=False
                    print("Giá trị nonce đã bị thay đổi")
                    return False
    
    def print_blockchain(self):
        for i in range(1,len(self.chain)):
            print(f'----------Block number: {self.chain[i].index}\nTimestamp: {self.chain[i].timestamp}\nData: {self.chain[i].data}\nPrevious_hash: {self.chain[i].previous_hash}\nHash: {self.chain[i].hash}\nNonce: {self.chain[i].nonce}')


##############################################################################################

blockchain=Blockchain()
print("""1:Thêm chuỗi
         2:Hiển thị chuỗi
         3:Kiểm tra chuổi
         4:Thoát""")
asn=0
while asn!=1:
    number=int(input("Nhập lựa chọn của bạn: "))
    if number==1:
        data=str(input("Nhập data của bạn: "))
        last_block=Blockchain.last_block()
        new_nonce=Blockchain.proof_of_work(last_block)
        new_block=Blockchain.new_block(data,last_block.hash,new_nonce)
        print("Đã thêm khối vào chuỗi")
    elif number==2:
        blockchain.print_blockchain()
    elif number==3:
        if blockchain.vaild_chain() is True:
            print("Chuỗi khối là hợp lệ")
        else:
            print("Chuỗi khối không hợp lệ")
            break
    else:
        asn==1

